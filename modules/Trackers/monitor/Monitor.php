<?php
if(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');
/*********************************************************************************
 * The contents of this file are subject to the SugarCRM Master Subscription
 * Agreement ("License") which can be viewed at
 * http://www.sugarcrm.com/crm/master-subscription-agreement
 * By installing or using this file, You have unconditionally agreed to the
 * terms and conditions of the License, and You may not use this file except in
 * compliance with the License.  Under the terms of the license, You shall not,
 * among other things: 1) sublicense, resell, rent, lease, redistribute, assign
 * or otherwise transfer Your rights to the Software, and 2) use the Software
 * for timesharing or service bureau purposes such as hosting the Software for
 * commercial gain and/or for the benefit of a third party.  Use of the Software
 * may be subject to applicable fees and any use of the Software without first
 * paying applicable fees is strictly prohibited.  You do not have the right to
 * remove SugarCRM copyrights from the source code or user interface.
 *
 * All copies of the Covered Code must include on each user interface screen:
 *  (i) the "Powered by SugarCRM" logo and
 *  (ii) the SugarCRM copyright notice
 * in the same form as they appear in the distribution.  See full license for
 * requirements.
 *
 * Your Warranty, Limitations of liability and Indemnity are expressly stated
 * in the License.  Please refer to the License for the specific language
 * governing these rights and limitations under the License.  Portions created
 * by SugarCRM are Copyright (C) 2004-2012 SugarCRM, Inc.; All Rights Reserved.
 ********************************************************************************/


require_once('modules/Trackers/Metric.php');
require_once('modules/Trackers/Trackable.php');

define('MAX_SESSION_LENGTH', 36);

class Monitor implements Trackable {

    var $metricsFile;
    var $name;
    protected $metrics;
    protected $cachedStores;
    var $stores;
    var $monitor_id;
    var $table_name;
    protected $enabled = true;
	protected $dirty = false;

	var $date_start;
	var $date_end;
	var $active;
	var $round_trips;
	var $seconds;
	var $session_id;

    /**
     * Monitor constructor
     */
    function Monitor($name='', $monitorId='', $metadata='', $store='') {

    	if(empty($metadata) || !file_exists($metadata)) {
    	   $GLOBALS['log']->error($GLOBALS['app_strings']['ERR_MONITOR_FILE_MISSING'] . "($metadata)");
    	   throw new Exception($GLOBALS['app_strings']['ERR_MONITOR_FILE_MISSING'] . "($metadata)");
    	}

    	$this->name = $name;
    	$this->metricsFile = $metadata;

    	require($this->metricsFile);
    	$fields = $dictionary[$this->name]['fields'];
    	$this->table_name = !empty($dictionary[$this->name]['table']) ? $dictionary[$this->name]['table'] : $this->name;
    	$this->metrics = array();
    	foreach($fields as $field) {

    	   //We need to skip auto_increment fields; they are not real metrics
    	   //since they are generated by the database.
    	   if(isset($field['auto_increment'])) {
    	   	  continue;
    	   }

    	   $type = isset($field['dbType']) ? $field['dbType'] : $field['type'];
    	   $name = $field['name'];
    	   $this->metrics[$name] = new Metric($type, $name);
    	}

    	$this->monitor_id = $monitorId;
    	$this->stores = $store;

    	if(isset($this->metrics['session_id'])) {
	 		//set the value of the session id for 2 reasons:
	 		//1) it is the same value no matter where it is set
	 		//2) ensure it follows some filter rules.
	 		$this->setValue('session_id', $this->getSessionId());
    	}
    }

    /**
     * setValue
     * Sets the value defined in the monitor's metrics for the given name
     * @param $name String value of metric name
     * @param $value Mixed value
     * @throws Exception Thrown if metric name is not configured for monitor instance
     */
    public function setValue($name, $value) {
        if(!isset($this->metrics[$name])) {
          $GLOBALS['log']->error($GLOBALS['app_strings']['ERR_UNDEFINED_METRIC'] . "($name)");
          throw new Exception($GLOBALS['app_strings']['ERR_UNDEFINED_METRIC'] . "($name)");
        } else if($this->metrics[$name]->isMutable()) {
          $this->$name = is_object($value) ? get_class($value) : $value;
          $this->dirty = true;
        }
    }

    public function getValue($name){
    	return $this->$name;
    }

    /**
     * getStores
     * Returns Array of store names defined for monitor instance
     * @return Array of store names defined for monitor instance
     */
    function getStores() {
        return $this->stores;
    }

    /**
     * getMetrics
     * Returns Array of metric instances defined for monitor instance
     * @return Array of metric instances defined for monitor instance
     */
    function getMetrics() {
    	return $this->metrics;
    }

	/**
	 * isDirty
	 * Returns if the monitor has data that needs to be saved
	 * @return $dirty boolean
	 */
	function isDirty(){
		return $this->dirty;
	}

    /**
     * save
     * This method retrieves the Store instances associated with monitor and calls
     * the flush method passing with the montior ($this) instance.
     * @param $flush boolean parameter indicating whether or not to flush the instance data to store or possibly cache
     */
    public function save($flush=true) {
    	//If the monitor is not enabled, do not save
    	if(!$this->isEnabled()&&$this->name!='tracker_sessions')return false;

    	//if the monitor does not have values set no need to do the work saving.
    	if(!$this->dirty)return false;

    	if(empty($GLOBALS['tracker_' . $this->table_name])) {
    	    foreach($this->stores as $s) {
	    		$store = $this->getStore($s);
	    		$store->flush($this);
    		}
    	}
    	$this->clear();
    }

	/**
	 * clear
	 * This function clears the metrics data in the monitor instance
	 */
	public function clear() {
	    $metrics = $this->getMetrics();
	    foreach($metrics as $name=>$metric) {
	    	    if($metric->isMutable()) {
                   $this->$name = '';
	    	    }
	    }
		$this->dirty = false;
	}

	/**
	 * getStore
	 * This method checks if the Store implementation has already been instantiated and
	 * will return the one stored; otherwise it will create the Store implementation and
	 * save it to the Array of Stores.
	 * @param $store The name of the store as defined in the 'modules/Trackers/config.php' settings
	 * @return An instance of a Store implementation
	 * @throws Exception Thrown if $store class cannot be loaded
	 */
	protected function getStore($store) {

		if(isset($this->cachedStores[$store])) {
		   return $this->cachedStores[$store];
		}

        if(!file_exists("modules/Trackers/store/$store.php")) {
           $GLOBALS['log']->error($GLOBALS['app_strings']['ERR_STORE_FILE_MISSING'] . "($store)");
           throw new Exception($GLOBALS['app_strings']['ERR_STORE_FILE_MISSING'] . "($store)");
        }

		require_once("modules/Trackers/store/$store.php");
		$s = new $store();
		$this->cachedStores[$store] = $s;
		return $s;
	}

 	public function getSessionId(){
 		$sessionid = session_id();
	    if(!empty($sessionid) && strlen($sessionid) > MAX_SESSION_LENGTH) {
	       $sessionid = md5($sessionid);
	    }
	    return $sessionid;
 	}

 	/**
 	 * Returns the monitor's metrics/values as an Array
 	 * @return An Array of data for the monitor's corresponding metrics
 	 */
 	public function toArray() {
 		$to_arr = array();
 		$metrics = $this->getMetrics();
	    foreach($metrics as $name=>$metric) {
	    	    $to_arr[$name] = isset($this->$name) ? $this->$name : null;
	    }
	    return $to_arr;
 	}

 	public function setEnabled($enable=true) {
 		$this->enabled = $enable;
 	}

 	public function isEnabled() {
 		return $this->enabled;
 	}
}

?>
